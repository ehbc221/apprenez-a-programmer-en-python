Help on class list in module builtins:

class lliisstt(object)
 |  list() -> new empty list
 |  list(iterable) -> new list initialized from iterable's items
 |  
 |  Methods defined here:
 |  
 |  ____aadddd____(self, value, /)
 |      Return self+value.
 |  
 |  ____ccoonnttaaiinnss____(self, key, /)
 |      Return key in self.
 |  
 |  ____ddeelliitteemm____(self, key, /)
 |      Delete self[key].
 |  
 |  ____eeqq____(self, value, /)
 |      Return self==value.
 |  
 |  ____ggee____(self, value, /)
 |      Return self>=value.
 |  
 |  ____ggeettaattttrriibbuuttee____(self, name, /)
 |      Return getattr(self, name).
 |  
 |  ____ggeettiitteemm____(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  ____ggtt____(self, value, /)
 |      Return self>value.
 |  
 |  ____iiaadddd____(self, value, /)
 |      Implement self+=value.
 |  
 |  ____iimmuull____(self, value, /)
 |      Implement self*=value.
 |  
 |  ____iinniitt____(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ____iitteerr____(self, /)
 |      Implement iter(self).
 |  
 |  ____llee____(self, value, /)
 |      Return self<=value.
 |  
 |  ____lleenn____(self, /)
 |      Return len(self).
 |  
 |  ____lltt____(self, value, /)
 |      Return self<value.
 |  
 |  ____mmuull____(self, value, /)
 |      Return self*value.n
 |  
 |  ____nnee____(self, value, /)
 |      Return self!=value.
 |  
 |  ____nneeww____(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ____rreepprr____(self, /)
 |      Return repr(self).
 |  
 |  ____rreevveerrsseedd____(...)
 |      L.__reversed__() -- return a reverse iterator over the list
 |  
 |  ____rrmmuull____(self, value, /)
 |      Return self*value.
 |  
 |  ____sseettiitteemm____(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  ____ssiizzeeooff____(...)
 |      L.__sizeof__() -- size of L in memory, in bytes
 |  
 |  aappppeenndd(...)
 |      L.append(object) -> None -- append object to end
 |  
 |  cclleeaarr(...)
 |      L.clear() -> None -- remove all items from L
 |  
 |  ccooppyy(...)
 |      L.copy() -> list -- a shallow copy of L
 |  
 |  ccoouunntt(...)
 |      L.count(value) -> integer -- return number of occurrences of value
 |  
 |  eexxtteenndd(...)
 |      L.extend(iterable) -> None -- extend list by appending elements from the iterable
 |  
 |  iinnddeexx(...)
 |      L.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
 |  
 |  iinnsseerrtt(...)
 |      L.insert(index, object) -- insert object before index
 |  
 |  ppoopp(...)
 |      L.pop([index]) -> item -- remove and return item at index (default last).
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  rreemmoovvee(...)
 |      L.remove(value) -> None -- remove first occurrence of value.
 |      Raises ValueError if the value is not present.
 |  
 |  rreevveerrssee(...)
 |      L.reverse() -- reverse *IN PLACE*
 |  
 |  ssoorrtt(...)
 |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  ____hhaasshh____ = None
